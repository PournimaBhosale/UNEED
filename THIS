#Binary Search

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <ctime>

using namespace std;

// Binary search function
int binarySearch(const vector<int> &arr, int key)
{
    int low = 0, high = arr.size() - 1;
    while (low <= high)
    {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key)
            return mid;
        else if (arr[mid] > key)
            high = mid - 1;
        else
            low = mid + 1;
    }
    return -1;
}

int main()
{
    const int SIZE = 5000; // Number of elements
    vector<int> randomList(SIZE);

    // Generate random numbers and sort the list
    srand(time(0));
    for (int i = 0; i < SIZE; ++i)
        randomList[i] = rand() % 10000;
    sort(randomList.begin(), randomList.end());

    // Display first 20 elements
    cout << "First 20 elements of the sorted list:\n";
    for (int i = 0; i < 20; ++i)
        cout << randomList[i] << " ";
    cout << "...\n";

    // Input number to search
    int key;
    cout << "Enter the number to search: ";
    cin >> key;

    // Perform binary search and display result
    int result = binarySearch(randomList, key);
    if (result != -1)
        cout << "Element " << key << " found at index " << result << ".\n";
    else
        cout << "Element " << key << " not found in the list.\n";

    return 0;
}






#Quicksort


#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <chrono>

using namespace std;

// Function to partition the array
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; ++j) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Quick Sort function
void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    // Input size
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> arr(n);

    // Generate random array
    srand(time(0));
    for (int i = 0; i < n; ++i) {
        arr[i] = rand() % 1000; // Random numbers between 0 and 999
    }

    cout << "Unsorted array: ";
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Measure execution time
    auto start = chrono::high_resolution_clock::now();
    quickSort(arr, 0, n - 1);
    auto end = chrono::high_resolution_clock::now();

    cout << "Sorted array: ";
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;

    chrono::duration<double> elapsed = end - start;
    cout << "Execution time: " << elapsed.count() << " seconds.\n";

    return 0;
}







#Knapsack

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Item
{
    int weight, profit;
    double ratio;
};

bool compare(Item a, Item b)
{
    return a.ratio > b.ratio;
}

double knapsack(int capacity, vector<Item> items)
{
    for (auto &item : items)
        item.ratio = (double)item.profit / item.weight;
    sort(items.begin(), items.end(), compare);

    double totalProfit = 0;
    for (auto &item : items)
    {
        if (capacity >= item.weight)
        {
            totalProfit += item.profit;
            capacity -= item.weight;
        }
        else
        {
            totalProfit += item.profit * ((double)capacity / item.weight);
            break;
        }
    }
    return totalProfit;
}

int main()
{
    vector<Item> items = {{10, 60}, {20, 100}, {30, 120}};
    int capacity = 50;
    cout << "Maximum profit: " << knapsack(capacity, items) << endl;
    return 0;
}





#Knapsack user input
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Item
{
    int weight, profit;
    double ratio;
};

bool compare(Item a, Item b)
{
    return a.ratio > b.ratio;
}

double knapsack(int capacity, vector<Item> items)
{
    for (auto &item : items)
        item.ratio = (double)item.profit / item.weight;
    sort(items.begin(), items.end(), compare);

    double totalProfit = 0;
    for (auto &item : items)
    {
        if (capacity >= item.weight)
        {
            totalProfit += item.profit;
            capacity -= item.weight;
        }
        else
        {
            totalProfit += item.profit * ((double)capacity / item.weight);
            break;
        }
    }
    return totalProfit;
}

int main()
{
    int n;
    cout << "Enter the number of items: ";
    cin >> n;

    vector<Item> items(n);
    cout << "Enter the weight and profit of each item:" << endl;
    for (int i = 0; i < n; i++)
    {
        cout << "Item " << i + 1 << ": ";
        cin >> items[i].weight >> items[i].profit;
    }

    int capacity;
    cout << "Enter the knapsack capacity: ";
    cin >> capacity;

    cout << "Maximum profit: " << knapsack(capacity, items) << endl;

    return 0;
}




#Floyd Warshell

#include <iostream>
#include <vector>
#define INF 1000000000 // A large integer value for infinity

using namespace std;

void floydWarshall(vector<vector<int>> &graph) {
    int V = graph.size();

    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (graph[i][k] != INF && graph[k][j] != INF 
                    && graph[i][k] + graph[k][j] < graph[i][j]) {
                    graph[i][j] = graph[i][k] + graph[k][j];
                }
            }
        }
    }

    // Print the shortest distances
    cout << "Shortest distances between every pair of vertices:" << endl;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (graph[i][j] == INF)
                cout << "INF ";
            else
                cout << graph[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int V;
    cout << "Enter the number of vertices: ";
    cin >> V;

    vector<vector<int>> graph(V, vector<int>(V));

    cout << "Enter the adjacency matrix (use " << INF << " for infinity):" << endl;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }

    floydWarshall(graph);

    return 0;
}


#Knapsack dp,backtracking

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// Function for Dynamic Programming
int knapsackDP(int W, const vector<int> &weights, const vector<int> &values, int n)
{
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    for (int i = 1; i <= n; i++)
    {
        for (int w = 1; w <= W; w++)
        {
            if (weights[i - 1] <= w)
            {
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
            }
            else
            {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][W];
}

// Helper function for Backtracking
void backtrack(int W, const vector<int> &weights, const vector<int> &values, int index, int currWeight, int currValue, int &maxValue)
{
    if (index == weights.size())
    {
        maxValue = max(maxValue, currValue);
        return;
    }

    // Include the current item if it fits
    if (currWeight + weights[index] <= W)
    {
        backtrack(W, weights, values, index + 1, currWeight + weights[index], currValue + values[index], maxValue);
    }
    // Exclude the current item
    backtrack(W, weights, values, index + 1, currWeight, currValue, maxValue);
}

// Function for Backtracking
int knapsackBacktracking(int W, const vector<int> &weights, const vector<int> &values)
{
    int maxValue = 0;
    backtrack(W, weights, values, 0, 0, 0, maxValue);
    return maxValue;
}

// Node structure for Branch and Bound
struct Node
{
    int level, weight, profit, bound;
};

// Function to calculate the bound of a node
int calculateBound(Node u, int n, int W, const vector<int> &weights, const vector<int> &values)
{
    if (u.weight >= W)
        return 0;

    int bound = u.profit;
    int j = u.level + 1;
    int totalWeight = u.weight;

    // Add items while there is space
    while (j < n && totalWeight + weights[j] <= W)
    {
        totalWeight += weights[j];
        bound += values[j];
        j++;
    }

    // Add fractional part of the next item
    if (j < n)
    {
        bound += (W - totalWeight) * values[j] / weights[j];
    }
    return bound;
}

// Function for Branch and Bound
int knapsackBranchAndBound(int W, const vector<int> &weights, const vector<int> &values, int n)
{
    queue<Node> Q;
    Node u, v;

    u.level = -1; // Starting at root
    u.weight = u.profit = 0;
    u.bound = calculateBound(u, n, W, weights, values);
    Q.push(u);

    int maxProfit = 0;

    while (!Q.empty())
    {
        u = Q.front();
        Q.pop();

        if (u.bound > maxProfit)
        {
            v.level = u.level + 1;

            // Take the current item
            v.weight = u.weight + weights[v.level];
            v.profit = u.profit + values[v.level];
            if (v.weight <= W && v.profit > maxProfit)
            {
                maxProfit = v.profit;
            }
            v.bound = calculateBound(v, n, W, weights, values);
            if (v.bound > maxProfit)
            {
                Q.push(v);
            }

            // Don't take the current item
            v.weight = u.weight;
            v.profit = u.profit;
            v.bound = calculateBound(v, n, W, weights, values);
            if (v.bound > maxProfit)
            {
                Q.push(v);
            }
        }
    }
    return maxProfit;
}

// Menu-driven main function
int main()
{
    int n, W;
    cout << "Enter number of items: ";
    cin >> n;
    vector<int> weights(n), values(n);

    cout << "Enter weights of items: ";
    for (int i = 0; i < n; i++)
        cin >> weights[i];
    cout << "Enter values of items: ";
    for (int i = 0; i < n; i++)
        cin >> values[i];
    cout << "Enter maximum weight of knapsack: ";
    cin >> W;

    while (true)
    {
        cout << "\nMenu:\n";
        cout << "1. Dynamic Programming\n";
        cout << "2. Backtracking\n";
        cout << "3. Branch and Bound\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        int choice;
        cin >> choice;

        switch (choice)
        {
        case 1:
            cout << "Maximum value using Dynamic Programming: "
                 << knapsackDP(W, weights, values, n) << endl;
            break;
        case 2:
            cout << "Maximum value using Backtracking: "
                 << knapsackBacktracking(W, weights, values) << endl;
            break;
        case 3:
            cout << "Maximum value using Branch and Bound: "
                 << knapsackBranchAndBound(W, weights, values, n) << endl;
            break;
        case 4:
            cout << "Exiting...\n";
            return 0;
        default:
            cout << "Invalid choice. Try again.\n";
        }
    }
}






#Nqueen

#include <iostream>
#include <vector>

using namespace std;

// Function to print the chessboard
void printBoard(const vector<int>& positions, int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (positions[i] == j)
                cout << "Q ";
            else
                cout << ". ";
        }
        cout << endl;
    }
}

// Check if placing a queen at (row, col) is safe
bool isSafe(const vector<int>& positions, int row, int col) {
    for (int i = 0; i < row; i++) {
        // Check column and diagonals
        if (positions[i] == col || abs(positions[i] - col) == abs(i - row)) {
            return false;
        }
    }
    return true;
}

// Backtracking function to solve the N-Queens problem
bool solveNQueens(int N, vector<int>& positions, int row) {
    if (row == N) { // All queens are placed
        return true;
    }

    for (int col = 0; col < N; col++) {
        if (isSafe(positions, row, col)) {
            positions[row] = col; // Place the queen
            if (solveNQueens(N, positions, row + 1)) {
                return true;
            }
        }
    }

    return false; // No valid placement found
}

// Main function
int main() {
    int N;
    cout << "Enter the value of N for the N-Queens problem: ";
    cin >> N;

    if (N < 1) {
        cout << "Invalid input. N must be greater than or equal to 1.\n";
        return 0;
    }

    vector<int> positions(N, -1); // Store column positions of queens
    if (solveNQueens(N, positions, 0)) {
        cout << "Solution for " << N << "-Queens:\n";
        printBoard(positions, N);
    } else {
        cout << "No solution exists for " << N << "-Queens.\n";
    }

    return 0;
}




#Subset

#include <iostream>
#include <vector>
using namespace std;

// Function to print a subset
void printSubset(const vector<int> &subset)
{
    cout << "{ ";
    for (int num : subset)
    {
        cout << num << " ";
    }
    cout << "}" << endl;
}

// Backtracking function to find subsets
bool subsetSum(const vector<int> &set, vector<int> &subset, int index, int target)
{
    if (target == 0)
    { // Found a subset with the required sum
        printSubset(subset);
        return true;
    }

    if (index >= set.size() || target < 0)
    {
        return false; // No valid subset
    }

    // Include the current element
    subset.push_back(set[index]);
    if (subsetSum(set, subset, index + 1, target - set[index]))
    {
        return true;
    }

    // Exclude the current element (Backtracking step)
    subset.pop_back();
    if (subsetSum(set, subset, index + 1, target))
    {
        return true;
    }

    return false;
}

// Main function
int main()
{
    int n, target;
    cout << "Enter the number of elements in the set: ";
    cin >> n;

    vector<int> set(n);
    cout << "Enter the elements of the set: ";
    for (int i = 0; i < n; i++)
    {
        cin >> set[i];
    }

    cout << "Enter the target sum: ";
    cin >> target;

    vector<int> subset;
    cout << "Subsets with the sum " << target << ":\n";
    if (!subsetSum(set, subset, 0, target))
    {
        cout << "No subset found with the sum " << target << ".\n";
    }

    return 0;
}


#TSP
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

// Function to solve TSP using Dynamic Programming (Held-Karp Algorithm)
int tspDP(const vector<vector<int>> &dist, int n)
{
    vector<vector<int>> dp(1 << n, vector<int>(n, INT_MAX));
    dp[1][0] = 0; // Starting point

    for (int mask = 1; mask < (1 << n); mask++)
    {
        for (int u = 0; u < n; u++)
        {
            if (mask & (1 << u))
            { // Check if u is in the subset
                for (int v = 0; v < n; v++)
                {
                    if (mask & (1 << v) && v != u)
                    {
                        dp[mask][u] = min(dp[mask][u], dp[mask ^ (1 << u)][v] + dist[v][u]);
                    }
                }
            }
        }
    }

    int min_cost = INT_MAX;
    for (int u = 1; u < n; u++)
    {
        min_cost = min(min_cost, dp[(1 << n) - 1][u] + dist[u][0]);
    }
    return min_cost;
}

// Function to solve TSP using a Greedy Algorithm
int tspGreedy(const vector<vector<int>> &dist, int n)
{
    vector<bool> visited(n, false);
    int cost = 0, curr = 0;

    visited[0] = true;
    for (int i = 1; i < n; i++)
    {
        int next = -1, min_cost = INT_MAX;
        for (int j = 0; j < n; j++)
        {
            if (!visited[j] && dist[curr][j] < min_cost)
            {
                next = j;
                min_cost = dist[curr][j];
            }
        }
        cost += min_cost;
        curr = next;
        visited[curr] = true;
    }
    cost += dist[curr][0]; // Return to the starting point
    return cost;
}

// Main function
int main()
{
    int n;
    cout << "Enter the number of cities: ";
    cin >> n;

    vector<vector<int>> dist(n, vector<int>(n));
    cout << "Enter the distance matrix:\n";
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> dist[i][j];
        }
    }

    int dp_solution = tspDP(dist, n);
    int greedy_solution = tspGreedy(dist, n);

    cout << "\nOptimal solution using Dynamic Programming (Held-Karp): " << dp_solution << endl;
    cout << "Solution using Greedy Algorithm: " << greedy_solution << endl;

    return 0;
}


