#include <iostream>
#include <vector>
using namespace std;

// Function to print a subset
void printSubset(const vector<int> &subset)
{
    cout << "{ ";
    for (int num : subset)
    {
        cout << num << " ";
    }
    cout << "}" << endl;
}

// Backtracking function to find subsets
bool subsetSum(const vector<int> &set, vector<int> &subset, int index, int target)
{
    if (target == 0)
    { // Found a subset with the required sum
        printSubset(subset);
        return true;
    }

    if (index >= set.size() || target < 0)
    {
        return false; // No valid subset
    }

    // Include the current element
    subset.push_back(set[index]);
    if (subsetSum(set, subset, index + 1, target - set[index]))
    {
        return true;
    }

    // Exclude the current element (Backtracking step)
    subset.pop_back();
    if (subsetSum(set, subset, index + 1, target))
    {
        return true;
    }

    return false;
}

// Main function
int main()
{
    int n, target;
    cout << "Enter the number of elements in the set: ";
    cin >> n;

    vector<int> set(n);
    cout << "Enter the elements of the set: ";
    for (int i = 0; i < n; i++)
    {
        cin >> set[i];
    }

    cout << "Enter the target sum: ";
    cin >> target;

    vector<int> subset;
    cout << "Subsets with the sum " << target << ":\n";
    if (!subsetSum(set, subset, 0, target))
    {
        cout << "No subset found with the sum " << target << ".\n";
    }

    return 0;
}
